trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python36:
      python.version: '3.6'

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - script: |
      pip install --upgrade pip pipenv
      pipenv lock --requirements > Functions/requirements.txt
      cd Functions
      python3 -m venv .env
      source .env/bin/activate
      pip install -r requirements.txt
      ls -la
      pwd
    displayName: 'Lock dependencies'

  - task: ArchiveFiles@2
    inputs:
#      rootFolderOrFile: '$(Build.SourcesDirectory)'
      rootFolderOrFile: Functions
      includeRootFolder: false
      archiveType: zip
      archiveFile: '$(Build.ArtifactStagingDirectory)/build-$(Build.BuildId).zip'
      replaceExistingArchive: true
      verbose: true

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/build-$(Build.BuildId).zip'
      artifactName: drop

  - task: AzureCLI@1
    inputs:
      azureSubscription: $(azureSubscription)
      scriptLocation: inlineScript
      inlineScript: |
        az group create \
          --name $(resourceGroupName) \
          --location $(location) \
          --verbose
        az group deployment create \
          --resource-group $(resourceGroupName) \
          --template-file $(System.DefaultWorkingDirectory)/Resources.json \
          --verbose
      workingDirectory: Test

  - task: AzureFunctionApp@1
    inputs:
      azureSubscription: $(azureSubscription)
      appType: 'functionAppLinux'
      appName: '$(resourceGroupName)Functions'
      deployToSlotOrASE: true
      resourceGroupName: $(resourceGroupName)
      slotName: 'production'
      package: '$(Build.ArtifactStagingDirectory)/**/*.zip'
